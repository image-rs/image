name: Rust CI

on:
  workflow_call:
    inputs:
      # What MSRV to use for the tests.
      msrv:
        required: true
        type: string

      # The list of feature combinations to test, as a JSON array.
      features:
        required: false
        type: string
        default: '["default"]'

      # Whether to build cargo-fuzz targets.
      cargo-fuzz:
        required: false
        type: boolean
        default: false

      # An optional extra feature to enable for benchmarks.
      benchmark-feature:
        required: false
        type: string
        default: ""

jobs:
  test_features:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features: ${{ fromJSON(inputs.features) }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Cache Cargo Dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    - name: build
      run: cargo build -v --no-default-features --features "$FEATURES"
      env:
        FEATURES: ${{ matrix.features }}
    - name: test
      run: >
        cargo test -v --no-default-features --features "$FEATURES" &&
        cargo doc -v --no-default-features --features "$FEATURES"
      env:
        FEATURES: ${{ matrix.features }}

  test_toolchains:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        rust:
          - ${{ inputs.msrv }}
          - nightly
          - beta
    steps:
    - uses: actions/checkout@v4

    - uses: dtolnay/rust-toolchain@nightly
      if: ${{ matrix.rust == inputs.msrv }}
    - name: Generate Cargo.lock with minimal-version dependencies
      if: ${{ matrix.rust == inputs.msrv }}
      run: cargo -Zminimal-versions generate-lockfile

    - uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
    - name: Cache Cargo Dependencies
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    - name: build
      run: cargo build -v
    - name: test
      if: ${{ matrix.rust != inputs.msrv }}
      run: cargo test -v && cargo doc -v

  test_other_archs:
    # github actions does not support 32-bit or big endian systems directly, but
    # it does support QEMU. so we install qemu, then build and run the tests in
    # an emulated mips system. NOTE: you can also use this approach to test for
    # big endian locally.
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [powerpc-unknown-linux-gnu, i686-unknown-linux-gnu]
    steps:
      - uses: actions/checkout@v4
      - name: Install or use cached cross-rs/cross
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cross
      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: ${{ matrix.arch }}
      - name: Start Docker (required for cross-rs)
        run: sudo systemctl start docker
      - name: Cross-Run Tests using QEMU
        run: cross test --target ${{ matrix.arch }}

  clippy:
    runs-on: ubuntu-latest
    steps:
    - name: install-dependencies
      run: sudo apt update && sudo apt install ninja-build meson nasm
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
      with:
        components: clippy
    - run: cargo clippy --all-features --all-targets -- -D warnings
      env:
        SYSTEM_DEPS_DAV1D_BUILD_INTERNAL: always

  public_private_dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: build
      run: |
        echo '#![deny(exported_private_dependencies)]' | cat - src/lib.rs > src/lib.rs.0
        mv src/lib.rs.0 src/lib.rs
        echo 'cargo-features = ["public-dependency"]' | cat - Cargo.toml > Cargo.toml.0
        mv Cargo.toml.0 Cargo.toml
        # mark rayon crate as public
        sed -i 's/rayon = { ver/rayon = { public = true, ver/' Cargo.toml
        # mark num-traits crate as public
        sed -i 's/num-traits = { ver/num-traits = { public = true, ver/' Cargo.toml
        # cargo +nightly check
        cargo check

  rustfmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt
    - name: Run rustfmt check
      run: cargo fmt -- --check

  cargo-deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2

  cargo-semver-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Cargo Dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          feature-group: default-features
          release-type: minor

  build_benchmarks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: build
      run: cargo build -v --benches --features="${{ inputs.benchmarks-feature }}"

  build_fuzz_cargo-fuzz:
    name: "Fuzz targets (cargo-fuzz)"
    runs-on: ubuntu-latest
    if: ${{ inputs.cargo-fuzz == 'true' }}
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@nightly
    - name: Install cargo-fuzz
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-fuzz
    - name: check
      run: cargo fuzz check
      env:
        CARGO_INCREMENTAL: 0
